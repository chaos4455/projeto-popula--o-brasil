import pandas as pd
import numpy as np
from keras.models import load_model
import matplotlib.pyplot as plt
import json
import yaml
import os
import logging

# Configure logging
logging.basicConfig(filename='consumo_modelo_log.txt', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')


class ModelLoader:
    def load_model(self, filepath):
        try:
            model = load_model(filepath, compile=False)
            logging.info(f'Modelo carregado de {filepath}')
            return model
        except FileNotFoundError:
            logging.error(f"Erro: Modelo não encontrado em '{filepath}'.")
            raise
        except Exception as e:
            logging.exception(f"Erro ao carregar o modelo: {e}")
            raise


class Predictor:
    def __init__(self, model):
        self.model = model

    def predict(self, data):
        try:
            predictions = self.model.predict(data)
            logging.info('Previsões geradas.')
            return predictions
        except Exception as e:
            logging.exception(f"Erro durante a previsão: {e}")
            raise


class ResultSaver:
    def save_results(self, df, output_dir, output_formats):
        try:
            os.makedirs(output_dir, exist_ok=True)
            for fmt in output_formats:
                filepath = os.path.join(output_dir, f'previsao_populacao.{fmt}')
                if fmt == 'csv':
                    df.to_csv(filepath, index=False, encoding='utf-8')
                elif fmt == 'json':
                    df.to_json(filepath, orient='records')
                elif fmt == 'yaml':
                    with open(filepath, 'w', encoding='utf-8') as f:
                        yaml.dump(df.to_dict(orient='records'), f)
                elif fmt == 'txt':
                    with open(filepath, 'w', encoding='utf-8') as f:
                        f.write(df.to_string(index=False))
                logging.info(f'Resultados salvos em {filepath}')
        except Exception as e:
            logging.exception(f"Erro ao salvar os resultados: {e}")
            raise


class PlotGenerator:
    def generate_plot(self, df, filepath):
        try:
            plt.figure(figsize=(10, 6))
            plt.plot(df['ano'], df['população'])
            plt.xlabel('Ano')
            plt.ylabel('População (milhões)')
            plt.title('Previsão da População para os Próximos 50 Anos')
            plt.savefig(filepath)
            plt.close()
            logging.info(f'Gráfico salvo em {filepath}')
        except Exception as e:
            logging.exception(f"Erro ao gerar o gráfico: {e}")
            raise


if __name__ == "__main__":
    model_filepath = 'models/modelo.h5'
    output_dir = 'resultados'
    output_formats = ['csv', 'json', 'yaml', 'txt']
    plot_filepath = 'previsao_populacao.png'
    future_years = np.arange(2025, 2075).reshape(-1, 1)

    try:
        model_loader = ModelLoader()
        model = model_loader.load_model(model_filepath)

        predictor = Predictor(model)
        predictions = predictor.predict(future_years)

        df_predictions = pd.DataFrame({'ano': np.arange(2025, 2075), 'população': predictions.flatten()})
        df_predictions['população'] = df_predictions['população'] / 1000000

        result_saver = ResultSaver()
        result_saver.save_results(df_predictions, output_dir, output_formats)

        plot_generator = PlotGenerator()
        plot_generator.generate_plot(df_predictions, plot_filepath)

        print("Previsões geradas e salvas com sucesso!")

    except Exception as e:
        print(f"Erro inesperado durante o consumo do modelo: {e}")
